// Code generated by go-bindata.
// sources:
// data/PKGBUILD
// data/archlinux.vim
// data/gvim.desktop
// data/gvim.install
// data/vimrc
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataPkgbuild = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x6d\x73\xdb\x36\x12\xfe\xae\x5f\xb1\x23\x7b\x4a\xc9\x67\x92\xa6\xde\xed\x56\x99\xdc\xc5\x69\xc6\x6d\x7a\xed\xc4\x6d\x66\xee\xea\x9e\x07\x24\x41\x0a\x35\xdf\x06\x00\x65\x29\x89\xfe\xfb\x2d\x48\x50\xa6\x24\x4b\xb1\x9d\x49\xee\x26\x55\xa7\x8e\x48\x60\x77\x01\xec\xee\xb3\xc0\x43\xf2\x00\x0e\x2f\xfc\x33\xf8\xe5\xc7\x57\xff\xf8\xed\xe2\xf5\x39\x74\x7a\xa3\x93\xfe\x08\x3a\x27\x4e\xdf\x74\x4e\xcc\x13\x07\x9c\xc1\xd9\x49\xff\xac\x3f\xfa\x37\x04\x73\x92\xc0\x61\xe3\x00\x7e\x22\x2c\x91\xf8\x47\xf9\x19\xfc\x3a\x49\x63\x22\xe0\xfc\x1d\xa3\xfe\x3b\xe6\xc1\x77\x61\x2a\x24\xf7\x9e\x87\x31\x61\x91\xe5\xa5\xf1\x33\x54\x78\x91\x26\x92\x33\x37\x97\x29\x6a\xfc\x80\x56\x9a\x13\x1a\x48\x16\x36\xe1\x52\xd2\x20\xa0\x89\x80\xef\xfe\x24\x89\x25\xf4\xdd\x0e\x6d\x99\xba\x0c\xc7\xfb\xbd\xba\x20\x12\x08\xf7\x26\x11\x4b\xf2\x19\xa4\x3c\x84\x3f\xd6\x35\xce\x49\xc2\x68\x04\x3f\xc0\x2b\xce\x82\x80\xc9\x09\x0e\x16\x4e\x70\x96\x4e\xa7\x33\x7c\xbe\x54\xb6\x72\xf1\xac\xd1\xc8\x6e\x42\x97\x08\x3a\x9e\xb2\x58\x5d\x27\x24\xa6\xe3\x16\xde\x98\x31\x4b\x58\x4c\x22\xc0\x6b\xf5\x67\x66\x73\x39\x49\x93\x2e\x84\xaa\x21\xac\xb7\xa8\x6b\x9e\x27\x92\xc5\xb4\xad\x6c\x4c\x29\x1f\xbf\xbd\xf8\xe9\xed\xcb\x37\x97\x17\x3f\xff\xb3\x71\x8d\xf7\x82\xa5\x89\xcf\xf8\x78\xd8\x53\x02\x9c\x46\x63\xa7\xa1\x26\x32\x6e\xb1\xc1\x68\x00\xb3\xd1\xe0\x7a\xd0\x6b\x37\x22\xe6\xa1\x33\x70\x02\x86\x97\x0b\x99\xc6\x67\x68\xda\x68\x37\x72\x1e\x8d\x8d\x89\x94\xd9\x99\x6d\xdf\xde\xde\x5a\xd8\x6a\xe1\xca\x8d\x46\x4c\x6e\xa8\x4f\x33\x9a\xf8\x62\xdc\x0a\xb3\x18\xca\x29\x75\xf4\x2f\xf0\xdc\x9d\x43\xc4\xdc\x99\x04\x9f\x8a\x1b\x99\x66\x66\xc0\x22\x6a\xe6\x92\x45\x02\x42\x79\xd3\x81\x28\x27\xed\x86\x48\x73\xee\xe9\x75\x1f\x96\x2b\xb0\x24\xe1\x56\xf8\xee\xec\x4c\x8f\x1b\xa2\x1f\x73\x57\x45\xc8\x46\xa9\xe2\x4f\x2d\x80\x4d\xa9\x3d\x5d\x55\x69\x80\xfe\x0f\x65\xb8\xb7\xbc\xbb\xf3\xbb\x72\x75\xd5\xaa\x1c\x69\xe9\xb9\xe1\x3c\x26\xc4\x11\x79\x8c\x8b\x31\x2e\x7f\xbc\xf8\xc5\x58\x8a\x01\x18\x4e\x9f\xba\x41\x37\xe8\x8d\x06\xa7\xdd\xc0\x09\x3a\xce\x69\x40\x3b\xfe\x88\xfa\xee\x70\xd0\xeb\x0e\x46\x5d\xa7\x7b\x4a\xdd\x81\xbb\xa2\x74\xda\x0b\x86\xae\x3b\x1a\xba\x7d\xff\x64\xe0\x12\x8f\x8e\x06\xae\xd7\x73\xbb\x34\x70\xba\xc3\xce\xc8\xe9\xba\x3d\x4a\xfd\xa0\xb3\xa2\xd4\x23\xfd\xe1\xa9\x17\x0c\x06\xfd\xd3\x13\x7f\xe8\x38\x41\xef\xd4\xeb\xfb\x81\xdb\x23\x9d\x3e\xc5\x0b\xc7\x19\x04\x68\x96\x60\x64\x1a\x19\xa7\x19\xe1\xb4\xd5\x86\xf7\x68\xc2\xf3\xa1\xe6\xc2\x06\xb6\x1c\xa0\xe3\x03\x04\x0e\xc8\x09\x85\x2c\xc2\x19\x40\x90\xf2\xe2\x2e\x8c\x52\x17\xf3\xab\x15\xb6\x0b\x47\x81\x8a\x0c\xb4\x04\x95\x98\xe9\x60\x53\xe9\xd9\x45\x7b\x1b\xad\x08\xea\x83\xc9\xc0\x10\x1f\xfe\x63\x1d\x5d\xb5\x0e\xb4\xcd\xcb\x7f\x5d\x5e\x5b\x47\x98\x6a\x6f\x5e\x5c\x7f\x7f\xf1\xfa\xa5\x75\xd4\xbc\x6a\x83\x75\x74\xf8\xe1\xca\xf9\x60\xc0\x55\xb1\x28\xc1\x3d\x3b\xa0\x44\xe6\x9c\x5a\x93\xed\xb6\x1e\x65\x05\x9b\x5a\xb8\x56\x6c\x84\x6f\xbe\x01\x82\xb0\xf3\xd2\x24\x68\x37\x4a\x17\x34\x0f\xb1\x03\xb3\xbd\x89\xb7\x6a\xb1\xe8\x0d\x60\x58\x48\xde\x6b\x7c\xfd\xfe\xfc\x8f\x05\x76\xf9\x69\x61\xd9\xcb\xc0\x24\x75\xb7\x95\x82\x0b\xd3\xcd\x59\xe4\x17\x72\x09\x6d\x2c\x1a\x8d\xe2\xfe\xce\xd1\xcd\xc3\xf7\xe5\x30\x8b\xa6\x5d\x43\xa0\x56\x43\x19\xcb\x56\x93\x62\x21\x4e\x59\x2f\xc2\x34\x31\x5c\x01\x9b\x8d\xed\x5c\xf0\x65\x5b\x94\x7a\x24\x12\x92\x48\xaa\x10\x6a\x4f\x09\xb7\x11\x32\xca\xe6\x52\xe4\x16\x93\xdf\xd4\xcb\x17\xe3\x49\x1e\xd2\xd5\x2e\x44\x45\x86\xd1\xf3\xdd\xf9\xd8\xf8\x3b\xe6\x39\xbc\x56\x89\x6e\x2c\x85\x68\x42\x5c\x84\x9d\x42\xe8\x5a\x13\xf1\xa2\x55\x53\xb3\x71\x92\x2e\x5b\x7c\x26\x4a\xc5\x9c\xad\x2b\xc6\x79\x24\x99\x3b\x97\x74\xbd\xc3\x13\x5e\x9a\xd1\x0d\x13\x09\x95\x2e\x25\x58\x77\xd7\xc4\x33\xca\x11\x95\x92\xf2\x6c\x43\xa5\x2c\x22\x3b\x3b\xbb\x5b\x7a\x55\xe1\xd9\xd2\x85\x05\xa7\xec\x51\x31\x52\x05\xac\x71\x7f\x3c\x75\xfd\xdd\xc7\xf3\x2b\x89\xe7\x3e\x8e\x2b\x71\xd4\xad\x8f\x08\x63\xd5\xf3\xf8\x28\x6a\xcd\x7b\x82\xa8\x7b\x1e\x1a\x43\x6d\x7e\x1f\xcb\x4f\x8d\xe5\x4e\x48\xae\x04\xfa\xb3\xc4\x32\xfc\x2a\x00\x39\xa7\x1b\xae\xc6\x20\x8e\x8b\x63\xed\x5f\x05\x95\xe1\x57\x05\xcb\xff\x8b\x88\x7e\x51\x6c\xe2\xb9\xd6\x9b\x50\xef\x46\x9f\x6b\x91\x2e\x94\xa3\x83\xa4\x42\x0a\x70\xa9\x47\x72\x51\xb0\x87\x39\x9e\xdc\x69\xac\xb8\x41\xc0\x29\x7d\x47\x77\xed\xb2\x68\x48\x59\x2f\x8c\xec\x86\xff\x8a\x24\x4e\x26\x23\xde\x0d\x09\xe9\x75\xed\x04\xa6\xa7\x86\x67\x72\xe4\x69\xde\xd8\x78\xcb\xe0\x22\xce\x78\x3a\xa5\xfe\x31\x10\x98\xb0\x70\x12\xcd\xa1\x4a\x38\x35\xf9\x63\x60\x5a\x00\x34\xf7\x85\x34\x28\x38\xcf\x94\xe1\x48\xc8\x46\x31\xdf\x90\xaa\x43\x4b\xc5\x1d\x6d\x54\x5c\x5b\x91\x1f\x94\x2c\x29\x2d\x4d\x3c\x46\x45\x5b\x51\xb3\x25\xc7\x6d\xd6\x4e\xfa\xe3\x82\x27\xe0\x00\x0b\xb3\xb8\x42\x56\xbd\x68\x82\x81\x99\x66\x80\x81\xc9\x65\x28\xe6\xa4\xa6\x85\xac\x5a\x2a\x4a\xa9\xc8\x34\x18\x35\xc0\xe0\x5d\x58\x36\xd6\x61\x54\xe8\xa9\xe9\x33\x5c\x6f\x39\xe4\xfd\x43\x35\x67\x33\xbf\xd9\x7e\xd0\xf1\xb5\x8c\x36\x98\x7f\x3a\x25\xd1\x7a\xfd\xf3\x8b\xb1\xa2\x78\x70\xfe\xf2\xf2\xd7\xf3\x8b\x37\xe3\x66\x61\xb7\x50\x47\xae\x84\x90\x8c\xa2\x92\x3e\xea\x89\xf8\x80\x4c\xbe\x95\x20\x55\x54\x54\xca\x4b\xb9\x8a\x3f\x8f\xa1\xa6\xa7\x90\x6d\xbb\x2c\xb1\xdf\xd3\xd9\xf1\x94\xd1\xdb\x45\x45\x40\x23\x8a\x30\x11\x69\x4c\x71\x16\x49\x86\xe1\x15\xd8\x81\xac\xcf\xdf\x50\x47\x02\xce\xa9\x8d\x52\x60\xca\x39\xa2\x08\xa9\xa2\x62\x6c\x60\x60\x93\x63\x40\xe7\x99\xed\xd3\xa9\x9d\xe4\x51\x04\x1f\x74\x72\xdf\x4e\x14\x6f\xe5\x94\xf8\x70\x8d\x52\x68\xeb\xdb\x25\xb5\xf3\x91\xcb\xe9\xc6\x45\xd1\x82\x33\x36\x03\xa0\x33\xcb\x01\x35\x43\xfc\xb9\x67\x85\x75\x49\xf5\x78\xc0\x51\xf7\x07\x98\x3f\x4c\xa0\x65\x2c\x11\x49\x2a\x4b\x7f\x0a\xf5\xb4\x04\x58\x00\xb7\x14\x26\x64\x4a\xb1\x07\x5e\xfd\x76\xd1\xd0\xa4\xb1\x58\xfe\x9b\x32\x5b\x56\x86\xe1\x55\x5b\x99\xed\xa5\x2b\x4d\xbe\xc5\x1d\xea\x79\x45\x61\x4a\x3f\x9e\xc1\x6b\x1d\x22\x30\xcf\xe3\x41\xaf\x57\xd9\xb3\xfd\xd4\xb3\xf3\x10\xd7\x4b\x2c\x89\x59\x5e\x3a\xe8\x7e\xa3\xda\x96\xb0\x97\xb4\x78\x51\xb5\x29\xdd\x35\x2c\x7e\x76\x0c\x8a\x3c\xcb\x52\x2e\x0b\xbe\x4e\x7c\xec\x41\x05\x05\x48\x8f\xb3\x4c\xb2\x24\x84\x88\x24\x61\xae\x52\xe7\x89\x80\x54\x45\x11\x7f\xb0\x02\xe2\xbf\xfa\x31\xd5\x76\x9c\x56\xf0\x79\x0a\x5e\x77\xa1\x72\x8f\xc6\x3d\x1a\x3f\x1d\x8d\x55\xe6\x7d\x95\xa8\x7c\x28\x28\x3f\xe7\xe6\xb9\x7a\xa0\xdd\xc3\x75\x0f\xd7\x27\xc3\x35\xfc\x12\xbb\x27\xf1\xa7\x24\xf1\x50\xb8\x22\x4a\xc7\x08\x5d\xe4\x42\xea\x75\x95\xf2\xe9\x27\xa2\x53\xbd\xc0\xa9\xbf\xa1\x00\x63\xf3\x6d\x8e\xc2\x21\xd2\xa4\x8d\x2d\xf6\x91\x78\xfc\x38\xe8\x37\xf7\xe3\x15\xec\xeb\xe0\x8e\x8b\x17\x3b\x35\x30\xee\xa2\x20\x7b\x78\x3f\x06\xde\x77\xe8\x4c\x28\xf6\x20\x21\xe4\x34\xc6\x54\x05\xc1\x30\x07\x4b\xa4\xe3\xff\x75\xd5\x5a\xc2\x3d\x14\xae\x8a\x64\xea\x2c\x43\xe8\x26\x37\x62\x13\xb8\xeb\xf1\xac\xde\xe3\xed\x84\x2e\xc9\x32\xcc\x2e\xa2\x76\x32\xb1\xa2\xb5\xbd\x30\xa0\x50\x6f\x34\xeb\x8d\xac\x0c\x77\xbc\xfb\xad\x66\x6c\x16\x93\x4c\x1b\x44\xb1\xf5\x92\xf3\xe5\x6b\xce\x17\x3b\x23\x7c\xb4\xf6\x40\x21\xa6\xdf\x08\x77\xab\x33\xc5\xff\xaa\x22\x3d\xbc\x20\x85\x9f\xa3\x56\x3d\xba\x46\xed\x8f\x22\xfb\x5a\xf5\x35\xd7\xaa\x9a\xbb\xd7\x4b\x55\x75\xf8\x53\xec\x43\x3d\x12\xc6\xa1\x8b\xef\x35\x56\x4a\x87\xa1\x9e\xa0\x2a\x70\x91\xdb\x9b\x02\x5c\x2e\x1a\xce\x33\xec\x58\x7e\xc1\x60\x6c\x3b\xe6\x6f\xbc\xb2\xaf\x7d\x54\xf0\x78\x9c\x55\xe7\x52\x7d\x6b\x2e\xb9\x51\xd5\x22\xd3\x34\x12\xed\xc2\xdb\x0a\x19\x6a\x39\x08\xb3\xe2\xbb\x0b\xf5\xa4\x35\x4a\x31\x64\x98\xa1\x86\x5e\xe2\xae\xd4\x43\x7d\xfb\x5e\xcc\x96\xc1\x3c\xc7\x3a\x57\xb0\xb6\x90\x4a\x88\xd2\x10\x47\xbf\xb1\x7c\x2c\x54\xdb\x13\x27\x90\x59\x94\x87\x68\xa1\x2e\xbe\x33\xc8\xfa\x33\x1c\x44\xe6\xdd\x07\x46\x8b\xfb\xed\x68\x98\xb0\x19\x7c\x7f\x79\xe0\x0c\x3b\xce\xa0\x51\xff\x10\x24\xa6\x42\x28\x47\x1d\xab\x37\x00\xab\x77\xca\x8c\x5d\xb5\x58\x78\x53\xca\x18\x4f\x99\x19\xfa\x59\x15\x23\x6b\x89\xdb\x8c\x48\xdc\xa8\xea\xed\x45\xae\xb9\x54\x4a\xca\x91\x93\x24\x7e\xa4\x48\x2e\xee\x7e\x98\xad\x2a\x64\x58\xfe\xd5\xbb\x8a\x32\x64\x77\x4b\x68\x0a\x9b\x67\xb1\x40\x0e\x63\xa3\x60\xf1\xfb\x6d\xd1\x94\xd0\x5b\xd5\xa2\x7e\xb0\xe1\xf8\xea\xe8\xca\xa2\x45\xb2\xd9\x57\x27\xc7\xd5\x27\x70\x47\xc7\x47\xd5\x26\x60\x37\x3f\x75\x5d\x77\x73\xb2\x8b\xc2\xac\xb6\x6d\x04\x8a\x7d\xfc\xb7\xee\x7b\x61\x7b\xb8\xa6\x10\x13\x2d\xbc\xf6\x71\x1d\xd7\x34\x91\x7c\x7e\x2d\xa8\xfa\x34\x6a\xb3\xcf\x5f\xed\x5f\x3c\x69\x6e\x55\x36\x2c\xad\xdf\x79\x5f\x7f\x72\xf4\x91\x62\x59\x7e\x9b\x54\x1f\x73\x89\xeb\xdd\x8a\x2b\xdf\x7b\x3d\x64\xea\xc5\x64\x56\xd5\xf4\x44\x43\xb7\xa8\x78\x4a\x60\x3b\x80\x2a\xa9\xc7\x3b\x49\x6b\x6e\xa5\xa9\x7e\x3c\xec\xf7\x3f\x56\x69\x57\xb7\xad\x08\x37\x5e\x01\x1f\x1d\xf9\x29\x25\xbd\x36\xd0\x5a\x4d\xff\x6f\x00\x00\x00\xff\xff\x38\x36\x54\xf2\xdb\x29\x00\x00")

func dataPkgbuildBytes() ([]byte, error) {
	return bindataRead(
		_dataPkgbuild,
		"data/PKGBUILD",
	)
}

func dataPkgbuild() (*asset, error) {
	bytes, err := dataPkgbuildBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/PKGBUILD", size: 10715, mode: os.FileMode(420), modTime: time.Unix(1446990084, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataArchlinuxVim = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x53\x4b\x6f\xe3\x36\x10\xbe\xfb\x57\x4c\x0d\x14\x69\x01\x59\x49\x0f\xbd\x14\x49\x50\x27\x56\x12\x01\x7e\x04\x96\x9c\x16\x28\x8a\x05\x25\x8d\xa4\x59\x53\xa4\x40\x52\x91\x9d\x43\x7e\xfb\x0e\x99\xc7\x22\x59\xac\x00\x13\x12\x39\xfc\x5e\x33\x9e\x42\xde\x22\xcc\x4d\xd9\x2e\x49\x0d\x07\x68\xa4\x2e\x84\x84\x47\xea\x4c\x09\x33\xb0\xe8\x1c\xa9\x06\xb4\x92\x47\x10\x50\xe3\x08\x56\x28\x84\x0a\x6b\x31\x48\x67\x27\xd3\xc9\x14\x56\x82\x94\xe3\x1f\x9a\xbf\x20\x3c\x79\xab\x3b\x61\x61\xf1\x44\x58\x3d\x51\x09\xff\x35\xda\x3a\x53\xfe\xdd\x74\x82\x64\x5c\xea\xee\xff\x70\x6f\x9d\x3c\x24\x5b\x48\x16\x69\x0e\xf9\x5d\x9a\xc1\x4d\xba\x4c\x22\x48\xf3\x93\x0c\x36\x7c\xf2\xcf\x36\xcd\xf3\x64\x0d\xbb\xfb\x8d\x5f\x6e\xb7\xf3\x45\x92\x45\x70\xbb\xdc\x5c\xcd\x97\x70\xbd\x59\xdf\xa4\xb7\xbb\xed\x3c\x4f\x37\x6b\x06\xcb\xee\xe6\xcb\x25\x5c\x25\xb0\xd8\xac\x13\x48\xd7\x70\x8a\xae\x3c\x0d\x3e\x22\xd8\x65\x4c\x94\xdd\x27\xd7\xe9\x4d\x7a\xfd\xf1\xaa\x2f\x7d\x3e\x8d\x43\xe1\xc4\x8b\xd2\xa6\x13\x92\xdd\x8e\x08\x83\x45\x9f\xc4\x0c\x0f\x0e\x95\x25\xad\x6c\x0c\x69\x0d\x47\x3d\xc0\x28\x94\x03\x67\x06\x5f\x30\x63\x47\xbd\x70\x54\x90\x24\x77\x64\x0c\x83\x9d\x7e\x44\x28\x5b\xa1\x1a\x04\xc7\x01\xd7\x5a\x4a\x3d\xfa\x24\xad\x13\x0e\x3b\x54\x9c\x1d\x87\x0b\x4a\xbf\x5d\x96\x08\x9f\x9e\x29\xec\x58\xc0\x03\x75\xef\x71\x03\x29\xeb\x50\x54\xa0\x6b\xf8\xe3\xec\xec\x57\x26\x87\x8f\xe4\x1e\xb3\x10\xe5\xde\xf6\xa2\xc4\x0b\x52\x15\x33\x45\xa8\x65\xc4\xbc\xc6\x79\xcc\x4e\x1b\x84\x5e\x8f\x68\xea\x41\xbe\xd7\xb2\xb4\x17\xf7\xa3\x37\xee\x51\xac\xee\xbe\xf7\x99\x0d\x98\x60\x04\x2b\x72\xda\x04\x9a\x96\x2c\xbf\x1e\x2f\xfe\x3c\xfb\x2c\xdc\xd3\xec\x11\x7b\xe0\x23\xc9\x73\x61\xbd\x5e\xd6\xd9\x09\x55\x85\x8d\xb7\xbb\x01\xc7\x0c\x12\xcd\x8f\x10\xaf\x38\xb6\x65\x49\x9e\xb9\x1c\x8c\x65\x11\xbd\xb6\xe4\xb8\x15\xc0\x4d\x0a\xfb\x8e\x3a\xf4\xd2\xb3\xa1\xae\xe9\xc0\x5c\xae\x15\x0e\x1a\x06\x96\xde\x24\xf4\x86\xb4\xe1\x68\x60\x6c\x51\x41\xa5\x7d\x13\x9c\x28\x42\x6e\x12\x03\x94\x37\x57\x93\x44\x25\x3a\xb4\xf1\x24\xfc\x27\x38\x79\xc1\x41\xf9\x6d\xeb\x23\xf1\x1f\x4a\x33\x28\xed\x91\xa7\xc3\xe9\xd7\x11\xd0\x21\x12\x60\x04\xc3\x8d\x89\x83\x23\xfb\x2a\xe5\x22\x2e\xc4\x3e\x7a\x8e\x62\x3b\xf6\x51\xac\xa3\x98\x54\xcd\xab\x18\x0e\x51\x2c\x75\x13\xc5\xd5\x23\x45\x71\x51\x48\x5e\x24\x7f\x16\xa6\x8e\xe2\xb2\xf0\x75\x15\x2f\x15\x97\x91\xdf\x27\xc5\x6f\x7a\x70\x51\xec\x74\x19\xc5\xbd\xe2\xbd\xaf\x3d\x37\x8c\x6a\x68\x85\xfd\xed\xa4\x19\xe8\x8b\x19\x94\x62\x6f\x27\xbf\x4f\x7c\x6c\x2b\xb1\xe7\x36\xb6\x54\xbb\x19\xcf\x0c\x72\xeb\x47\x6d\xf6\x41\x3d\x0f\x11\xfc\xeb\xd0\x74\x5c\xd8\x89\x1e\xce\xb3\x59\x1a\x4a\x2e\xe1\x7c\x45\x55\x25\x71\xa5\x79\xf2\x2f\x5f\x8e\x7f\xf9\xf9\x39\xaa\x8a\xea\xc9\xb7\x00\x00\x00\xff\xff\xd4\xce\x3c\xfb\x42\x04\x00\x00")

func dataArchlinuxVimBytes() ([]byte, error) {
	return bindataRead(
		_dataArchlinuxVim,
		"data/archlinux.vim",
	)
}

func dataArchlinuxVim() (*asset, error) {
	bytes, err := dataArchlinuxVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/archlinux.vim", size: 1090, mode: os.FileMode(420), modTime: time.Unix(1446937628, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataGvimDesktop = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x56\x5f\x6f\x13\x47\x10\x7f\xf7\xa7\x58\x21\x55\xa2\x82\xb4\x2a\x7d\x8c\xfc\xd0\xa6\x81\x46\x55\xa2\xaa\x0d\x11\x2d\xb2\xd0\xe6\x6e\x7c\x5e\x7b\x6f\xd7\xda\xdd\x33\x89\x9f\x48\x02\x4a\xa1\xad\xd4\x48\x14\xa9\x80\x80\x40\x0a\x01\xd1\x94\xbf\x01\xd2\x24\x48\x59\x78\xf5\x9f\x27\x7f\x80\xc8\x85\x8f\xd1\xd9\x3b\xfb\x7c\x8e\x90\xfa\xe4\xdd\x99\xdf\xce\xce\xcc\xfe\xe6\x77\x3e\xfd\x15\xe8\x8a\x91\x55\x32\x2e\x8c\x9a\x2f\xe4\xa6\x68\x08\xf9\x19\x46\x26\x26\xab\x4a\xd6\xc0\x8f\x0d\xa7\x67\x83\x82\x33\xda\xdf\xec\x9f\x76\xcd\xde\xb2\x0f\xec\x13\xbb\x61\x1f\x25\x4e\x8f\xc6\xce\x49\xc6\xb9\x54\xd4\x24\x46\x3f\x31\x16\xa5\x9a\x05\x5f\x41\xcf\x0a\x12\xad\x13\x93\xbd\x8d\x29\xe4\xa7\xed\x1a\x8b\xb4\xa1\x26\xf2\x09\xc2\x0f\xd7\x58\xf8\x71\xe2\x2d\xaa\xe4\xca\xfb\x06\x84\x1f\x91\xc3\x78\xac\xe7\x29\x41\x21\xdf\x59\xef\xac\x75\x7e\xef\xdc\xef\xdc\xc0\x63\x3d\x73\xe4\x0e\x24\x6b\xa6\x0b\xd9\x22\x88\x62\x06\xb3\x63\x42\xf4\xdc\x26\x76\xb3\xa1\x1a\x85\x1c\x3e\x73\x38\xcd\x9d\xcc\x4c\xf4\xae\xae\xf2\x42\xfe\x5b\x59\x55\xf4\x2c\x93\x62\x1e\xed\xd9\x8c\x55\xb6\x38\x85\xd9\xb4\xee\xb4\xfe\x69\x2f\xb5\x97\xdb\x3f\xb5\x9e\xb7\x76\x5a\x3b\xed\x9f\x5b\xaf\xf0\x4c\x02\xd0\x95\xf4\x3a\x48\x73\xd0\x18\x7f\xa2\x3e\x2b\x79\xf9\xed\x2a\x15\x8c\xd4\x86\x5a\xa2\x6b\x85\xfc\x71\xbb\xa9\x66\xed\x9a\x31\x8a\xfa\x69\xe9\xf5\xd2\x99\xb1\xa9\x4f\x4e\x7c\x79\xec\xf3\xcf\x8e\x15\xf2\xff\x5e\x7e\xf5\xfe\xf5\xb5\x77\x57\xcf\x3b\xff\x98\x0c\x43\x10\x06\xb3\x3e\x0b\xaa\x18\x71\x62\x60\xce\x10\xf0\x99\x91\x8a\x9c\x65\xa6\x44\xb4\xa7\x58\xd5\x30\x11\x90\x62\x24\x3c\x83\x85\x69\x42\x85\x4f\x42\xea\x29\x49\x14\x78\x52\xf9\xa0\xfa\x81\x62\x2a\x1c\xe4\x01\xb1\x8f\x89\x7d\x68\xff\xc2\xf5\x1d\xbb\x41\xec\x6d\xbb\x65\xef\xa1\x61\xc3\xde\x8d\x8d\x8f\x11\xb6\x9e\x46\x70\x7c\x19\x4f\x12\xc0\xfa\xaa\x12\x1f\xd8\x0c\x9c\xf8\x72\x93\xd2\x13\x76\x27\xce\x54\xd6\x70\x01\x7d\x70\x8a\x72\xec\x1a\x17\xa4\xa2\x68\xd1\xb0\xc0\x85\x31\x50\xd1\x66\x16\x4a\x98\x39\xcf\x64\xeb\x23\x57\xc6\x99\x20\x1c\x98\x36\x91\x08\x74\xd1\xae\x95\x58\x00\x2e\xda\x48\x92\x44\x8a\x05\x6c\x7e\xe3\x56\xe3\x71\x63\xa7\xf1\x77\x73\xa9\xb9\xdc\xbc\xd0\x5c\x68\xbc\x6e\x2e\x92\xc6\xb3\xc6\x2b\x5c\x2c\x34\x5e\x36\x2f\x36\xcf\x37\x36\xd0\x94\xc9\xa5\xc7\x69\xa2\x59\xc8\x38\xc5\xde\x71\x6c\x9a\x4f\x2b\xc8\x38\x49\x0e\xd5\xd8\xa1\xa3\x44\x23\x9d\x4a\xb4\x16\x3b\x7d\x29\x68\x59\x10\x6c\x6b\x59\x0c\x62\x60\xd5\x27\x05\x25\x35\x50\x9a\xd9\xa7\x82\x84\x50\xc6\x59\xf2\x29\xf1\x81\x7f\xa0\x7e\x37\x3a\x33\xf6\x39\x0b\x31\x64\x5c\x39\x4b\xae\x1c\x46\x15\x19\x0e\x18\x94\x64\x05\x51\x58\x6e\x02\x4c\x82\x65\x40\x38\x67\xf6\x22\x1a\x21\x4a\xde\x23\x62\x5a\xd3\xcc\x8b\x04\x31\xe7\xdd\x23\xc1\x07\x32\x71\xc3\x88\x34\xee\x5c\xee\xdc\xe8\xdc\xc5\x89\xbc\xdd\xb9\x4c\x3a\x2b\x9d\x75\xd2\xb9\x8a\x33\x1a\xef\x07\x58\xbc\x6a\x8a\x22\xdf\xfd\x84\xda\x91\x82\x37\x2b\xac\x46\xdf\xfc\x3a\x80\xc4\x43\x4c\x74\xdd\x6e\xd6\x20\xd0\x75\x50\x15\xd0\x75\xf3\x76\x25\x45\xb8\xd1\xb6\x57\x8a\x3c\x0a\x88\xdd\x32\x81\x5d\x2d\x52\x17\x2b\x9e\x70\xcd\x84\x1e\x00\x8d\xeb\xe9\x20\xe5\x84\x69\x75\x46\x8d\x4c\x31\x65\xe4\x51\x77\xfb\x45\xf7\xd2\xb5\xfd\x85\x07\x33\x6c\x7f\x71\x7d\x7f\x69\x79\x7f\xf1\xce\xfe\xe2\xeb\x14\xc3\x31\xce\x09\x8a\xe2\x11\xc4\x6d\x24\xfd\x4e\xa3\x6e\xa5\x98\x10\x87\xb9\x75\xbd\xb5\xdb\xbe\xee\x26\xdd\xe9\x02\xce\xfd\x39\x5c\x3f\x6b\x2f\xb5\x9e\xb4\x1e\xb5\x97\x53\xa8\xc0\x76\x7e\xa3\xa8\x57\x42\xe2\x82\x7b\x16\x18\x66\xa1\x93\xa1\x21\x6a\x8f\xe0\x85\x8e\xb1\x90\xc5\x9c\x99\xfa\x21\x0e\xd3\xc7\xc4\x6f\xdb\x03\x62\xa6\x1a\x35\x2c\x50\x34\x4c\x4f\x38\xe1\x1a\xf7\xe7\x0f\x3c\x5e\xd5\xb5\x28\xc4\xc6\xe0\x80\x4b\x2d\xfb\xbd\xf2\x21\x99\xbd\x14\xe7\x94\x6d\xd0\xca\x9e\x1b\xb0\xcc\xa3\x48\x17\x03\x4a\x30\x6f\x80\x8d\x7a\xad\xb8\xd8\x13\xbc\xf6\x22\xf6\x61\xab\xbd\x80\xbf\xbb\xad\x27\x89\x29\x6e\x4d\xeb\x11\x9a\xd1\xd8\x3e\x97\xcd\xc9\xe9\xe2\xf7\x8c\x0f\x09\x00\x56\xe3\x81\x1e\xce\xdd\x49\xe5\x8f\xa1\x0c\x78\x99\x25\x54\x2a\x43\x8d\x72\xc1\x2a\x43\x20\xe5\xd4\xe4\xcd\x72\xc2\xb7\x03\x9d\x76\x72\xda\xef\x34\x2a\x63\x22\x8d\x07\x30\x06\x09\xb2\xb7\x65\x1f\xee\xed\xee\xdd\xb6\x17\xf6\x56\xed\xa6\x7d\xba\xb7\xeb\x82\xed\xdd\x45\xdb\xaa\xfd\xc5\x3e\xb3\xe7\xf0\x77\xd9\xbe\x18\x1c\xc2\x5b\x4f\xd8\x6d\x7b\x8f\xdb\x6d\x07\xf5\xed\x76\x1d\x04\x87\x79\xe6\x31\x3d\x48\x2e\x72\xa4\xb9\x89\xf5\x2f\x22\x49\x36\xf1\x03\xf1\xf2\x7f\x5a\x33\x2c\xf3\xdd\x4b\x37\xdf\x2f\xed\x74\xb7\xb7\xba\x6b\xf7\x9c\xd8\xe3\x45\xef\xb6\xaf\xbc\xdf\x5d\xe9\xfe\xb1\x9e\x9b\x64\x21\x4c\xcf\x57\x21\xef\x6a\xfa\x14\x44\xc0\x99\x2e\x8d\xc6\x9b\x2a\xa7\x4c\x24\xcb\xb9\x91\x90\x56\xa0\xc8\x38\xf4\xf7\xde\x91\x23\x25\x5f\x65\x76\x5a\x79\xe9\x2e\xeb\xc9\xd8\xcb\xa8\x6c\x69\x3c\x99\x9a\xab\x54\x7b\x94\xf7\x77\xc6\x1b\x2c\x61\x6e\x94\x56\xab\x9c\x79\xd4\x7d\x6d\xd0\xa2\x4b\xc0\x79\xf2\x1d\x4a\x2f\xc8\xe4\x30\x9a\x1b\x9f\x03\x2f\x1f\xe0\x97\x90\x8c\x14\xc9\x47\xc7\x73\x13\x9e\x14\xf1\x3e\x17\x17\xf9\xc5\x20\x5a\x6e\x1a\x54\xc8\x04\xe5\xf9\x22\xe5\x1a\x72\xa7\x46\x4e\x8d\xa1\x2a\xeb\xaf\x99\x30\xdf\x81\x4e\xfe\xde\xe0\x47\x7a\x8c\x1a\x08\x70\x88\x41\xe7\x4f\xa2\x72\x30\x33\x3f\x3a\x8d\x17\x26\x9f\x84\xd1\xdc\x7f\x01\x00\x00\xff\xff\xa5\x6f\x3f\xe2\x17\x09\x00\x00")

func dataGvimDesktopBytes() ([]byte, error) {
	return bindataRead(
		_dataGvimDesktop,
		"data/gvim.desktop",
	)
}

func dataGvimDesktop() (*asset, error) {
	bytes, err := dataGvimDesktopBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/gvim.desktop", size: 2327, mode: os.FileMode(420), modTime: time.Unix(1446937628, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataGvimInstall = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x2d\x48\x49\x2c\x49\x8d\x4f\x49\x2d\xce\x2e\xc9\x2f\x88\x07\x72\x12\x93\x12\x8b\x53\x35\x34\x15\xaa\xb9\x14\x14\x20\xb2\xba\x50\x59\x5d\x98\xac\x82\xae\x6e\x61\x69\x66\x6a\x09\x57\x2d\x17\x57\x41\x7e\x71\x49\x7c\x66\x5e\x71\x49\x62\x4e\x0e\x8a\x2e\x0c\x33\xe1\xaa\x4b\x0b\xd2\x8b\x12\x53\x52\x89\x54\x5d\x94\x9a\x9b\x5f\x46\x58\x31\x20\x00\x00\xff\xff\x3d\xb2\x38\x6a\xc9\x00\x00\x00")

func dataGvimInstallBytes() ([]byte, error) {
	return bindataRead(
		_dataGvimInstall,
		"data/gvim.install",
	)
}

func dataGvimInstall() (*asset, error) {
	bytes, err := dataGvimInstallBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/gvim.install", size: 201, mode: os.FileMode(420), modTime: time.Unix(1446937628, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataVimrc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x92\x3f\x6f\xdb\x40\x0c\xc5\x77\x7f\x0a\x26\x28\xe0\x04\x70\xac\xa5\x40\x81\x6e\x1d\x3a\x64\x48\x0b\x14\x69\xd6\xe2\xac\xa3\xac\xab\xef\x8f\x40\xf2\xa2\xe8\xdb\xf7\x9d\xec\x04\x48\xdb\xc1\x83\x4f\xe4\x8f\xef\x3d\xf2\x9a\xbe\xc4\x48\xba\xa8\x71\xba\x9b\x83\x67\xf2\x3c\xb8\x1a\x4d\xc9\x09\x93\xb2\x51\xc8\xf4\xe1\xe9\xfe\xe1\xc7\xcf\x6f\x8f\xf7\x0f\x5f\x3b\x27\xfd\x18\x43\xae\x2f\xfb\xe7\x90\xe8\xa6\x6a\x75\x31\x2e\xf4\xbb\xaa\x6d\xae\xa9\xab\x2a\x9d\x8e\xe8\xed\xf0\xb9\xfd\x86\x10\x59\xdf\x77\xdd\x92\xcb\x9e\xb4\x54\xe9\xd9\xd3\x61\x21\x1b\x99\x7a\x60\xc8\x0a\x7d\x96\x9a\x2d\x24\x06\x6c\x29\x15\xcf\x99\x86\x80\xf2\x03\xc7\x32\xef\x89\xee\x87\xf5\x7d\x0e\x3a\xb6\xf2\x7e\x74\xf9\xc8\x00\x2e\x54\x06\x80\x8a\xae\xaa\x2d\xe4\xa3\xee\xd6\x4a\x1d\x4b\x8d\x1e\x38\x5f\x28\xac\x76\x6c\x0c\x4a\x4d\x17\xdd\x74\x6c\x7d\x53\x29\xfd\xed\x8e\x34\xe4\x1e\xa8\x77\x06\xe7\x00\x59\x07\xa6\xf2\xcc\x32\x4b\x30\xe3\x0c\x14\xe3\xdf\xd2\x54\x62\x30\xd5\xe9\x28\x0e\xc9\xad\xf3\x99\x5a\xd7\xe4\xfa\x93\x3b\xb2\x12\x06\x4d\x2c\x43\x91\xc4\xbe\x89\xb7\xf6\x22\xdc\x97\x94\x38\x7b\xb8\xb7\x02\x5c\x72\x27\xbe\x38\x41\xee\x83\xb1\x9c\xd3\x81\x89\xbf\xe4\x9c\x25\xc2\x86\x8b\xa8\xd2\xf3\x40\x17\xeb\xeb\x74\xc0\xb6\x80\x4f\xce\xc2\x21\xf2\x96\xca\x64\xa1\xe4\xfd\x06\xef\x8f\xcd\x35\x48\x7c\x49\x84\x72\xb1\xe6\x4c\x38\xc1\x9c\x27\xa7\x8d\xcb\x59\xab\x70\x03\x3b\x03\x59\x42\xa9\x7a\xa1\xac\x27\x01\xd0\x24\x05\x9e\xb0\xf3\x76\x1d\x58\xc1\x5c\xe4\x84\x9c\x6c\x5c\xd5\x3c\x85\x74\x27\x1c\x9d\x01\xf9\x1a\xc3\x7e\x73\x59\xea\xd5\x7b\x3b\x4d\xd6\x65\x9f\x93\xf0\x00\xdb\x8d\x50\xa2\xbf\x53\x5b\xe2\x39\xca\xa1\xe6\xbe\x4d\x87\xe1\x65\x47\xce\x7b\xda\xbe\xc1\xd6\xc5\xfd\xe2\x17\x97\xa6\xc8\x0d\xb8\x05\xf0\xbb\xc0\x95\xb5\x0c\x17\xb6\x1d\xec\x39\xff\x9f\xb3\xfc\xf4\xb1\xfb\xa7\x9b\x8a\xbc\x6d\x30\xb9\x8c\xc3\x06\xae\x9d\x6a\x5f\xf2\x10\x8e\xc8\x65\xfd\x04\xcb\x50\x2c\x54\xe6\x8c\x3c\x4f\x58\xd2\xd5\x66\xf3\x27\x00\x00\xff\xff\x12\x89\x43\xd6\x49\x03\x00\x00")

func dataVimrcBytes() ([]byte, error) {
	return bindataRead(
		_dataVimrc,
		"data/vimrc",
	)
}

func dataVimrc() (*asset, error) {
	bytes, err := dataVimrcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/vimrc", size: 841, mode: os.FileMode(420), modTime: time.Unix(1446937628, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/PKGBUILD": dataPkgbuild,
	"data/archlinux.vim": dataArchlinuxVim,
	"data/gvim.desktop": dataGvimDesktop,
	"data/gvim.install": dataGvimInstall,
	"data/vimrc": dataVimrc,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"PKGBUILD": &bintree{dataPkgbuild, map[string]*bintree{
		}},
		"archlinux.vim": &bintree{dataArchlinuxVim, map[string]*bintree{
		}},
		"gvim.desktop": &bintree{dataGvimDesktop, map[string]*bintree{
		}},
		"gvim.install": &bintree{dataGvimInstall, map[string]*bintree{
		}},
		"vimrc": &bintree{dataVimrc, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

